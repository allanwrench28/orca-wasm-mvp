#!/usr/bin/env bash
# Fallback setup script for Linux/macOS systems without PowerShell
# For the full-featured version, use: pwsh setup.ps1

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;36m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

success() { echo -e "${GREEN}✅ $1${NC}"; }
error() { echo -e "${RED}❌ $1${NC}"; }
info() { echo -e "${BLUE}ℹ️  $1${NC}"; }
warning() { echo -e "${YELLOW}⚠️  $1${NC}"; }

info "Starting Orca WASM setup (fallback script)..."

# Check if we're in the right directory
if [[ ! -f "wasm/CMakeLists.txt" ]]; then
    error "Please run this script from the orca-wasm-mvp root directory"
    exit 1
fi

# 1. Setup Emscripten SDK (idempotent)
info "Setting up Emscripten SDK..."

# Prefer existing EMSDK if available
if command -v emcc >/dev/null 2>&1 || [[ -n "${EMSDK:-}" ]]; then
    info "Emscripten already available, skipping install"
else
    if [[ ! -d "emsdk" ]]; then
            info "Cloning Emscripten SDK..."
            git clone https://github.com/emscripten-core/emsdk.git
    fi

    pushd emsdk >/dev/null
    ./emsdk install latest
    ./emsdk activate latest
    popd >/dev/null
    success "Emscripten SDK installed"
fi

# 2. Initialize OrcaSlicer submodule (robust, shallow, tracks main)
info "Initializing OrcaSlicer submodule..."

# Ensure .gitmodules has the right settings
git config -f .gitmodules submodule.orca.url https://github.com/SoftFever/OrcaSlicer.git >/dev/null
git config -f .gitmodules submodule.orca.branch main >/dev/null
git config -f .gitmodules submodule.orca.shallow true >/dev/null

# Try updating submodule to remote tracked branch with shallow clone
if ! git submodule update --init --depth 1 --remote --progress -- orca; then
    warning "Standard submodule update failed. Attempting to re-add submodule..."
    git submodule deinit -f -- orca || true
    rm -rf .git/modules/orca orca || true
    git submodule add -f -b main https://github.com/SoftFever/OrcaSlicer.git orca
    git submodule update --init --depth 1 --progress -- orca
fi

success "OrcaSlicer submodule ready"

# 3. Create environment configuration
info "Creating environment configuration..."
cat > wasm/toolchain/emsdk.env << 'EOF'
# Emscripten environment configuration
# Auto-generated by setup.sh (portable bash)

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
REPO_DIR="$(cd "$SCRIPT_DIR/../.." && pwd)"

# Prefer environment EMSDK if set, else repo-local emsdk
EMSDK_PATH="${EMSDK:-$REPO_DIR/emsdk}"

# Convert Windows path to Unix when under MSYS/Cygwin
if command -v cygpath >/dev/null 2>&1; then
    EMSDK_PATH="$(cygpath -u "$EMSDK_PATH")"
fi

if [[ -f "$EMSDK_PATH/emsdk_env.sh" ]]; then
    # shellcheck disable=SC1090
    source "$EMSDK_PATH/emsdk_env.sh"
elif [[ -f "/opt/emsdk/emsdk_env.sh" ]]; then
    # shellcheck disable=SC1091
    source "/opt/emsdk/emsdk_env.sh"
else
    echo "Warning: Emscripten environment not found"
fi
EOF

success "Environment configuration created"

# 4. Apply WASM patches
info "Applying WASM patches to OrcaSlicer..."
PATCH_FILE="patches/orca-wasm.patch"
if [[ -f ${PATCH_FILE} ]]; then
    pushd orca >/dev/null
    if git apply --reverse --check "../${PATCH_FILE}" >/dev/null 2>&1; then
        info "WASM patch already applied"
    else
        if git apply --check "../${PATCH_FILE}" >/dev/null 2>&1; then
            git apply "../${PATCH_FILE}"
            success "Applied WASM patch"
        else
            warning "WASM patch did not apply cleanly - you may need to apply it manually"
        fi
    fi
    popd >/dev/null
else
    warning "WASM patch file not found: ${PATCH_FILE}"
fi

success "Setup complete! 🎉"
info ""
info "Next steps:"
info "1. Build dependencies: bash deps/boost-wasm/build_boost.sh"
info "2. Build math libs: bash deps/toolchain-wasm/build_math.sh"
info "3. Build WASM: bash scripts/build-wasm.sh"
info ""
info "Or use the PowerShell script for automated building: pwsh build.ps1"
